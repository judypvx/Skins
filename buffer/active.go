package buffer

import (
    "log"
    "profitmaker/normalizer"
    "sync"
    "time"
)

type InAnalysisItem struct {
    Item       normalizer.NormalizedItem
    ReceivedAt time.Time
    Stage      string
}

var (
    mu       sync.RWMutex
    sessions = make(map[string]InAnalysisItem)
)

// TTL –≤ –º–∏–Ω—É—Ç–∞—Ö
const ttlMinutes = 5

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
func StartCleaner() {
    go func() {
        ticker := time.NewTicker(1 * time.Minute)
        for range ticker.C {
            clearExpired()
        }
    }()
}

// –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
func clearExpired() {
    mu.Lock()
    defer mu.Unlock()

    now := time.Now()
    removed := 0

    for id, item := range sessions {
        if now.Sub(item.ReceivedAt) > time.Minute*ttlMinutes {
            delete(sessions, id)
            removed++
        }
    }

    if removed > 0 {
        log.Printf("üßπ –û—á–∏—Å—Ç–∫–∞ TTL: —É–¥–∞–ª–µ–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤", removed)
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –±—É—Ñ–µ—Ä
func StartAnalysis(id string, item normalizer.NormalizedItem) {
    mu.Lock()
    defer mu.Unlock()
    sessions[id] = InAnalysisItem{
        Item:       item,
        ReceivedAt: time.Now(),
        Stage:      "start",
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞
func Get(id string) (InAnalysisItem, bool) {
    mu.RLock()
    defer mu.RUnlock()
    item, exists := sessions[id]
    return item, exists
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–¥–∏—é
func UpdateStage(id string, stage string) {
    mu.Lock()
    defer mu.Unlock()
    if item, exists := sessions[id]; exists {
        item.Stage = stage
        sessions[id] = item
    }
}

// –£–¥–∞–ª–∏—Ç—å
func Finish(id string) {
    mu.Lock()
    defer mu.Unlock()
    delete(sessions, id)
}

