package whitemarket

import (
    "encoding/json"
    "log"

    "github.com/centrifugal/centrifuge-go"
    "profitmaker/normalizer"
    "profitmaker/workerpool"
)

type ProductEvent struct {
    Type    string  `json:"type"`
    Content Product `json:"content"`
}

type Product struct {
    ID         string `json:"id"`
    AppID      string `json:"app_id"`
    AssetID    string `json:"asset_id"`
    ClassID    string `json:"class_id"`
    InstanceID string `json:"instance_id"`
    NameHash   string `json:"name_hash"`
    Price      string `json:"price"`
    Float      string `json:"float"`
    InspectURL string `json:"inspect_url"`
    PaintIndex string `json:"paint_index"`
    PaintSeed  string `json:"paint_seed"`
}

func StartWebSocket(token string, done chan bool) {
    // –°–æ–∑–¥–∞—ë–º WebSocket‚Äë–∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
    client := centrifuge.NewJsonClient("wss://api.white.market/ws_endpoint", centrifuge.Config{
        Token: token,
    })

    client.OnConnected(func(e centrifuge.ConnectedEvent) {
        log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WhiteMarket WS")
    })

    client.OnConnecting(func(e centrifuge.ConnectingEvent) {
        log.Printf("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... –∫–æ–¥: %d", e.Code)
    })

    client.OnError(func(e centrifuge.ErrorEvent) {
        log.Printf("‚ùå Centrifuge error: %v", e.Error)
    })

    client.OnDisconnected(func(e centrifuge.DisconnectedEvent) {
        log.Println("üîå WS –æ—Ç–∫–ª—é—á–∏–ª—Å—è:", e.Reason)
        done <- true
    })

    // –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª "market_products_updates"
    sub, err := client.NewSubscription("market_products_updates", centrifuge.SubscriptionConfig{})
    if err != nil {
        log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", err)
        done <- true
        return
    }

    sub.OnSubscribed(func(_ centrifuge.SubscribedEvent) {
        log.Println("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: market_products_updates")
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
        workerpool.StartWorkerPool(100, 500)
    })

    sub.OnPublication(func(e centrifuge.PublicationEvent) {
        var outer struct {
            Message string `json:"message"`
        }
        if err := json.Unmarshal(e.Data, &outer); err != nil {
            log.Println("‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ JSON:", err)
            return
        }

        var event ProductEvent
        if err := json.Unmarshal([]byte(outer.Message), &event); err != nil {
            log.Println("‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ JSON:", err)
            return
        }

        if event.Type == "market_product_added" || event.Type == "market_product_edited" {
            item := normalizer.NormalizeWhite(normalizer.RawWhiteItem{
                ID:       event.Content.AssetID,
                NameHash: event.Content.NameHash,
                Price:    event.Content.Price,
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–Ω–∞–ª–∏–∑
            select {
            case workerpool.TaskQueue <- item:
            default:
                log.Printf("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –¥—Ä–æ–ø: %s ‚Äî $%.2f", item.Name, item.Price)
            }
        }
    })

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    if err := sub.Subscribe(); err != nil {
        log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", err)
        done <- true
        return
    }

    log.Println("üü¢ WebSocket –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç")

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if err := client.Connect(); err != nil {
        log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err)
        done <- true
        return
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É, —Å–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    select {}
}
