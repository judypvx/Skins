package main

import (
    "log"
    "time"

    "profitmaker/auth"
    "profitmaker/config"
    "profitmaker/websocket/whitemarket"
)

func handleProduct(p whitemarket.Product, eventType string) {
    // —Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –≤—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
}

func keepConnectionAlive() {
    var failCount int

    for {
        token, err := auth.GetJWT(config.Cfg.Auth.PartnerToken)
        if err != nil {
            log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:", err)
            failCount++
            waitBackoff(failCount)
            continue
        }

        log.Printf("üü° TOKEN: %s...", token[:15])
        done := make(chan bool)

        go func() {
            whitemarket.StartWebSocket(token, done)
        }()

        select {
        case <-done:
            log.Println("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏")
            failCount++
            waitBackoff(failCount)
        case <-time.After(55 * time.Minute):
            log.Println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É")
            failCount = 0 // —É—Å–ø–µ—à–Ω—ã–π —Ü–∏–∫–ª ‚Äî —Å–±—Ä–æ—Å
        }
    }
}

func waitBackoff(fails int) {
    maxWait := 30 * time.Second
    delay := time.Duration(1<<min(fails, 5)) * time.Second
    if delay > maxWait {
        delay = maxWait
    }
    log.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ %s –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n", delay)
    time.Sleep(delay)
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}
